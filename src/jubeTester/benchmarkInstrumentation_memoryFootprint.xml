<?xml version="1.0" encoding="UTF-8"?>
<jube>

	<parameterset name="parameter">
		<!-- TODO REMOVE WHEN FILE SUBSTITUTION WILL BE IMPLEMENTED -->
		<parameter	name="HACK_PATH">							../../../../../							</parameter>
		<!-- TODO END REMOVE WHEN FILE SUBSTITUTION WILL BE IMPLEMENTED -->
		<parameter	name="fileOutput">							../resource/ioFiles/defaultJube			</parameter>
		<parameter	name="filePathStatistic">					../resource/statistic/					</parameter>
		<parameter	name="CubeDumpResFile">						../resource/tmpCubeDumpFile				</parameter>
		<parameter	name="fileScriptPlot">						./srcPlot/mainPlot.py					</parameter>
		<parameter	name="fileScriptParseCubeDumpRes">			./srcPlot/mainParseCubeDumpResFile.py	</parameter>
		<parameter	name="nbIoDevice">							1										</parameter>
		<parameter	name="nbProcessor">							2										</parameter>
		<parameter	name="cube_save_id">						16										</parameter>
		<parameter	name="fileExec"			type="str">			./posixGlibcAIO_sleep_memoryFootprint,
																./posixGlibcIO_sleep_memoryFootprint	</parameter>
		<parameter	name="nbCharOutput"	 type="int">			100000000								</parameter>
		<parameter	name="nbTry">								10										</parameter>
		<parameter name="benchmarkResultFile" type="str">
			${filePathStatistic}/${fileExec}_${nbCharOutput}Bytes.data
		</parameter>
	</parameterset>

	<parameterset name="parameter_variableDim_projection">
		<parameter	name="computeTime">							0.00001, 0.0001, 0.001, 
																0.01, 0,05, 0.1, 0.2, 0.3, 0.4, 0.5,
																 0.7, 1, 1.2, 1.45						</parameter>
	</parameterset>

	<parameterset name="parameter_variableDim">
		<parameter	name="nbIteration"		type="int">			1, 20, 50, 90							</parameter>
	</parameterset>



	<!-- Operation -->
	<!-- Initializes all the results files: name = $HACK_PATH${filePathStatistic}/${fileExec}_${computeTime}.data -->
	<!-- Needs to be executed before any other operation -->
	<!-- Needs to be updated when we change the parameterset "parameter_benchmarkResultFile" -->
	<benchmark name="init_outputFile" outpath="bench_run">
		<comment>Creates and writes the header of the data files that will contain the benchmark pattern assessment results</comment>
		<step name="init_outputFile">
			<use>parameter						</use>
			<do>echo											>  $HACK_PATH${benchmarkResultFile}	</do>
 			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Benchmark pattern info:"					>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo ${fileExec}								>> $HACK_PATH${benchmarkResultFile}	</do>

 			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Fixed dim and values:"					>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "nbCharoutput,"${nbCharOutput}				>> $HACK_PATH${benchmarkResultFile}	</do>
<!-- TODO add the dimension (+ in the python mainPlot.py) -->

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Variable dim:"							>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "nbIteration,computeTime"		 			>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Result dim:"								>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
 			<do>echo "Memory footprint (Byte)"					>> $HACK_PATH${benchmarkResultFile}	</do>

			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Number of tries:"						>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
 			<do>echo ${nbTry}									>> $HACK_PATH${benchmarkResultFile}	</do>
 
 			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "#Data:"									>> $HACK_PATH${benchmarkResultFile}	</do>
			<do>echo "################################"			>> $HACK_PATH${benchmarkResultFile}	</do>
		</step>
	</benchmark>


	<!-- Operation -->
	<!-- Run the different pattern benchmarks and assess them -->
	<!-- Needs to be executed after "init_outputFile"-->
	<benchmark name="run_benchmark" outpath="bench_run">
		<comment>Run the different pattern benchmarks and assess them</comment>
		<step name="run_benchmark">
			<use>parameter</use>
			<use>parameter_variableDim</use>
			<use>parameter_variableDim_projection</use>
			<!-- Execute the benchmark pattern and write the parameters (thanks to logger option m) -->
			<do>echo ${nbIteration} ", " ${computeTime} >> $HACK_PATH${benchmarkResultFile} </do>
			<do>	for i in `seq 1 $nbTry`;
        			do
						$HACK_PATH$fileExec	-nbIteration	$nbIteration			\
											-nbCharOutput	$nbCharOutput			\
											-computeTime	$computeTime			\
											-outputFile		$HACK_PATH$fileOutput	\
											-nbIoDevice		$nbIoDevice				\
											-nbProcessor	$nbProcessor			\
											-logger			-						\
		 				>> $HACK_PATH${benchmarkResultFile}
		 			done
 			</do>
			</step>
	</benchmark>


	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotMemoryFootprint" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotMemoryFootprint">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=point:computeTime:all -resultDimText="Memory_Footprint(Byte)"</do>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${benchmarkResultFile} -multipleTry -plotType=point:computeTime:all -resultDimText="Memory_Footprint(Byte)" -logScaleX -logScaleY</do>
		</step>
	</benchmark>




	<!-- Operation -->
	<!-- Plot the results of all the benchmark pattern assessments -->
	<!-- Needs to be executed after "run_benchmark" -->
	<benchmark name="plotMemoryFootprintCompare" outpath="bench_run">
		<comment>Plot the results of all the benchmark pattern assessments</comment>
		<!-- Operation -->
		<step name="plotMemoryFootprintCompare">
			<use>parameter							</use>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${filePathStatistic}/* -multipleTry -allProjectionIn1Frame -plotType=point:computeTime:all -resultDimText="Memory_Footprint(Byte)"</do>
			<do> python $HACK_PATH${fileScriptPlot} $HACK_PATH${filePathStatistic}/* -multipleTry -allProjectionIn1Frame -plotType=point:computeTime:all -resultDimText="Memory_Footprint(Byte)" -logScaleX -logScaleY</do>
		</step>
	</benchmark>
</jube>
